#!/bin/bash

# Define the Nginx configuration file
CONFIG_FILE="/path/to/nginx/config"

# Define variables
CHECK_IP_SERVICE="$#@check_ip_service"
DDNS_UPDATE_URL="$#@ddns_update_url"
ACCESS_CODE="$#@access_code"
LOG_FILE="$HOME/$#@domain_name.log"
DOMAIN_NAME="$#@domain_name"

# Get the current public IPv6 address
IPV6_ADDR=$(curl -6 -s $CHECK_IP_SERVICE)

# Check if we got a valid IPv6 address
if [[ -z "$IPV6_ADDR" ]]; then
    echo "$(date) - Failed to fetch IPv6 address." | tee -a "$LOG_FILE"
    exit 1
fi

# Extract ssl_certificate and ssl_certificate_key paths
SSL_CERT=$(cat "$CONFIG_FILE" | grep -oP 'ssl_certificate\s+\K[^;]+')
SSL_KEY=$(cat "$CONFIG_FILE" |grep -oP 'ssl_certificate_key\s+\K[^;]+')

# Read file contents if paths exist, otherwise set empty
SSL_CERT_CONTENT=""
SSL_KEY_CONTENT=""

if [[ -n "$SSL_CERT" && -f "$SSL_CERT" ]]; then
    SSL_CERT_CONTENT=$(sudo cat "$SSL_CERT")
fi

if [[ -n "$SSL_KEY" && -f "$SSL_KEY" ]]; then
    SSL_KEY_CONTENT=$(sudo cat "$SSL_KEY")
fi

# Construct JSON payload using jq
if [[ -n "$SSL_CERT_CONTENT" && -n "$SSL_KEY_CONTENT" ]]; then
    echo "Using SSL info from site config"
    DATA=$(jq -n \
        --arg access_code "$ACCESS_CODE" \
        --arg ipv6 "$IPV6_ADDR" \
        --arg domain_name "$DOMAIN_NAME" \
        --arg ssl_cert "$SSL_CERT_CONTENT" \
        --arg ssl_key "$SSL_KEY_CONTENT" \
        '{access_code: $access_code, ipv6: $ipv6, domain_name: $domain_name, ssl_certificate_crt: $ssl_cert, ssl_private_key: $ssl_key}')
else
    echo "No SSL information is found in site config"
    DATA=$(jq -n \
        --arg access_code "$ACCESS_CODE" \
        --arg ipv6 "$IPV6_ADDR" \
        --arg domain_name "$DOMAIN_NAME" \
        '{access_code: $access_code, ipv6: $ipv6, domain_name: $domain_name}')
fi

# Send the IPv6 address update request
RESPONSE=$(curl -X POST "$DDNS_UPDATE_URL" \
    -H "Content-Type: application/json" \
    -d "$DATA" --max-time 30)

# Log response from the server
echo "$(date) - Response from server for $DOMAIN_NAME: $RESPONSE"